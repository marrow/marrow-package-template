[metadata]

name = $project
description = TBD
long_description = file: README.md
long_description_content_type = text/markdown
license = MIT
license_file = LICENSE.txt
author = Alice Bevan-McGregor
author_email = alice@gothcandy.com
url = https://github.com/marrow/$repo
project_urls =
	Source code = https://github.com/marrow/$repo
	Issue tracker = https://github.com/marrow/$repo/issues


[options]

packages = marrow.$package
include_package_data = True
python_requires = >=3.7
zip_safe = False

; scripts

setup_requires =
	setuptools-scm >= 1.7.0

install_requires =
	typeguard ~=2.3.0,<4.0

tests_require =
	pytest
	pytest-cov
	pytest-flakes
	pytest-isort


[options.extras_require]

development =
	pytest
	pytest-cov
	pytest-flakes
	pytest-isort
	pytest-runner
	pre-commit
	bandit
	rope
	mypy


[options.package_data]
* = *.txt, *.md
; marrow/$package = py.typed


[options.entry_points]

; Populate plugin namespaces / register "entry points" here.


[check]

metadata = 1
strict = 1


[clean]

build-base = .packaging/build
bdist-base = .packaging/dist


[build]

build-base = .packaging/build
parallel = 3


[install]

optimize = 1


[sdist]

dist-dir = .packaging/release


[bdist]

bdist-base = .packaging/dist
dist-dir = .packaging/release


[bdist_egg]

bdist-dir = .packaging/dist
dist-dir = .packaging/release


[bdist_wheel]

bdist-dir = .packaging/dist
dist-dir = .packaging/release


[wheel]

universal = 0


[mypy]

follow_imports = silent
ignore_missing_imports = True
strict_optional = True
warn_no_return = False
check_untyped_defs = True
allow_redefinition = True


[tool:isort]

line_length = 120
multi_line_output = 4
balanced_wrapping = True
indent='		'
sections = FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER

known_first_party =
	marrow
	web


[tool:pytest]

addopts =
	-l -r fEsxw
	--flakes
	--cov-report term-missing
	--no-cov-on-fail
	--cov marrow.$package
	--durations=5
	--color=yes
	--isort
	test

filterwarnings =
	default
	ignore::DeprecationWarning:isort.*


[coverage:report]

exclude_lines =
	# Re-enable the standard pragma, since we override it.
	pragma: no( |-)?cov(er)?
	
	# Don't complain if non-runnable code isn't run:
	if 0:
	if False:
	if __name__ == .__main__.:
